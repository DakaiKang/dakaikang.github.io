<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-10T23:15:13-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dakai Kang</title><subtitle>This is the personal website of Dakai Kang.</subtitle><entry><title type="html">Practical View-Chang-Less Protocol PVP</title><link href="http://localhost:4000/jekyll/update/2023/03/10/PVP.html" rel="alternate" type="text/html" title="Practical View-Chang-Less Protocol PVP" /><published>2023-03-10T21:13:48-08:00</published><updated>2023-03-10T21:13:48-08:00</updated><id>http://localhost:4000/jekyll/update/2023/03/10/PVP</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/03/10/PVP.html">&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;The emergence of blockchain technology has renewed the interest in consensus-based resilient data management systems that can provide resilience to failures and can manage data between fully-independent parties. To maximize the performance of these systems, we have recently seen the development of several prototype consensus solutions that optimize for throughput at the expense of overall implementation complexity, latency, recovery costs, and the ability to deal with unreliable communication. Due to this, it remains unclear how these prototypes will perform under real-world workloads where latency and recovery matter.&lt;/p&gt;

&lt;p&gt;We present the Practical View-Change-Less Protocol PVP, a high-throughput consensus protocol that provides a stable and low latency in all cases, has a simple and lightweight recovery step incorporated in the normal commitment path, and can deal with unreliable communication. PVP does so by combining a &lt;em&gt;chained consensus design&lt;/em&gt;, which can replicate requests with a reduced message complexity and that uses a novel &lt;em&gt;Rapid View Synchronization&lt;/em&gt; protocol to enable robust and low-cost failure recovery, with a high-performance &lt;em&gt;concurrent consensus architecture&lt;/em&gt; in which independent instances of the chained consensus can operate concurrently to process requests with high throughput and without single-replica bottlenecks.&lt;/p&gt;

&lt;p&gt;Due to the concurrent consensus architecture, \PVP{} greatly outperforms traditional primary-backup consensus protocols such as PBFT by up to 430%, Narwhal by up to 296% and HS by up to 1808%. PVP is even able to outperform RCC, a state-of-the-art high-throughput concurrent consensus protocol, by up to 23% in normal conditions. Furthermore, PVP is able to maintain a stable and low latency and consistently high throughput even during failures.&lt;/p&gt;

&lt;h3 id=&quot;archive&quot;&gt;Archive&lt;/h3&gt;

&lt;p&gt;Kang, D., Rahnama, S., Hellings, J., &amp;amp; Sadoghi, M. (2023). Practical View-Change-Less Protocol through Rapid View Synchronization. &lt;a href=&quot;https://arxiv.org/abs/2302.02118&quot;&gt;&lt;em&gt;arXiv preprint arXiv:2302.02118&lt;/em&gt;.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Abstract</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/03/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-03-10T21:13:48-08:00</published><updated>2023-03-10T21:13:48-08:00</updated><id>http://localhost:4000/jekyll/update/2023/03/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/03/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>